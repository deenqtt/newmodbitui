// prisma/schema.prisma - SQLite version
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"] // untuk RPi
}

datasource db {
  provider = "sqlite"
  url      = "file:./iot_dashboard.db"
}

model User {
  id                   String            @id @default(cuid())
  email                String            @unique
  password             String
  roleId               String
  role_data            Role              @relation(fields: [roleId], references: [id])
  fingerprintId        String?           @unique
  cardUid              String?           @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  phoneNumber          String?
  dashboards           DashboardLayout[]
  assignedMaintenances Maintenance[]     @relation("AssignedToUser")
  notifications        Notification[]
}

model Role {
  id              String               @id @default(cuid())
  name            String               @unique
  description     String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  users           User[]
  rolePermissions RolePermission[]     @relation("RolePermissions")
  permissions     Permission[]         @relation("RolePermissions")
  menuPermissions RoleMenuPermission[]

  @@map("Role")
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  resource        String
  action          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[] @relation("RolePermissions")
  roles           Role[]           @relation("RolePermissions")

  @@unique([resource, action])
  @@map("Permission")
}

model MenuGroup {
  id          String     @id @default(cuid())
  name        String     @unique
  label       String
  icon        String?
  order       Int
  isActive    Boolean    @default(true)
  isDeveloper Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  items       MenuItem[]

  @@map("MenuGroup")
}

model MenuItem {
  id          String               @id @default(cuid())
  menuGroupId String
  name        String               @unique
  label       String
  path        String
  icon        String?
  order       Int
  isActive    Boolean              @default(true)
  isDeveloper Boolean              @default(false)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  menuGroup   MenuGroup            @relation(fields: [menuGroupId], references: [id])
  permissions RoleMenuPermission[]

  @@map("MenuItem")
}

model RoleMenuPermission {
  id         String   @id @default(cuid())
  roleId     String
  menuItemId String
  canView    Boolean  @default(true)
  canCreate  Boolean  @default(false)
  canUpdate  Boolean  @default(false)
  canDelete  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role       Role     @relation(fields: [roleId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@unique([roleId, menuItemId])
  @@map("RoleMenuPermission")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation("RolePermissions", fields: [roleId], references: [id])
  permission   Permission @relation("RolePermissions", fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("RolePermission")
}

model Maintenance {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  startTask   DateTime
  endTask     DateTime
  assignTo    String
  targetType  MaintenanceTarget
  targetId    String // Fleksibel untuk Device ID atau Rack ID
  status      String            @default("Scheduled")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isActive    Boolean           @default(true)

  // Relations
  assignedTo User @relation("AssignedToUser", fields: [assignTo], references: [id])

  // Optional device relation - hanya untuk targetType = Device
  deviceTargetId String? // Foreign key terpisah
  deviceTarget   DeviceExternal? @relation(fields: [deviceTargetId], references: [id])
}

model DeviceExternal {
  id                          String                      @id @default(cuid())
  uniqId                      String                      @unique @default(cuid())
  name                        String
  topic                       String                      @unique
  address                     String?
  rackId                      String? // Optional rack assignment
  positionU                   Int?                        @default(0) // Position in rack (U units)
  sizeU                       Int?                        @default(1) // Size in rack (U units)
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  lastPayload                 Json?
  lastUpdatedByMqtt           DateTime?
  rack                        Rack?                       @relation(fields: [rackId], references: [id])
  alarmConfigs                AlarmConfiguration[]
  publishTargetForBillConfig  BillConfiguration?          @relation("PublishTargetForBill")
  sourceForBillConfigs        BillConfiguration[]         @relation("SourceDeviceForBill")
  loggingConfigs              LoggingConfiguration[]
  layout2DDataPoints          Layout2DDataPoint[]
  layout2DFlowIndicators      Layout2DFlowIndicator[]
  maintenanceTasks            Maintenance[]
  thermalData                 ThermalData[]
  powerAnalyzerApiTopicConfig PowerAnalyzerConfiguration? @relation("PowerAnalyzerApiTopic")
  pueApiTopicConfig           PueConfiguration?           @relation("PueApiTopic")
}

model LoggingConfiguration {
  id           String         @id @default(cuid())
  customName   String
  key          String
  units        String?
  multiply     Float?         @default(1)
  deviceUniqId String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lastLoggedAt DateTime?
  
  loggingIntervalMinutes Int  @default(10)
  
  logs         LoggedData[]
  device       DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId])
  @@unique([deviceUniqId, key])
}

model LoggedData {
  id        String               @id @default(cuid())
  configId  String
  value     Float
  timestamp DateTime             @default(now())
  config    LoggingConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model BillConfiguration {
  id                        String         @id @default(cuid())
  customName                String         @unique
  sourceDeviceKey           String
  rupiahRatePerKwh          Float          @default(1467)
  dollarRatePerKwh          Float          @default(0.1)
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  publishTargetDeviceUniqId String         @unique
  sourceDeviceUniqId        String
  publishTargetDevice       DeviceExternal @relation("PublishTargetForBill", fields: [publishTargetDeviceUniqId], references: [uniqId])
  sourceDevice              DeviceExternal @relation("SourceDeviceForBill", fields: [sourceDeviceUniqId], references: [uniqId])
  logs                      BillLog[]
}

model BillLog {
  id         String            @id @default(cuid())
  configId   String
  rawValue   Float
  rupiahCost Float
  dollarCost Float
  timestamp  DateTime          @default(now())
  config     BillConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model PueConfiguration {
  id             String          @id @default(cuid())
  customName     String          @unique
  type           String          @default("pue")
  apiTopicUniqId String?         @unique
  pduList        Json?
  mainPower      Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  apiTopic       DeviceExternal? @relation("PueApiTopic", fields: [apiTopicUniqId], references: [uniqId])
}

model PowerAnalyzerConfiguration {
  id             String          @id @default(cuid())
  customName     String          @unique
  apiTopicUniqId String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  mainPower      Json?
  pduList        Json?
  apiTopic       DeviceExternal? @relation("PowerAnalyzerApiTopic", fields: [apiTopicUniqId], references: [uniqId])
}

model MenuConfiguration {
  id        String   @id @default(cuid())
  structure Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AlarmConfiguration {
  id           String                  @id @default(cuid())
  customName   String
  alarmType    AlarmType
  keyType      AlarmKeyType
  key          String
  deviceUniqId String
  minValue     Float?
  maxValue     Float?
  maxOnly      Boolean?                @default(false)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  bits         AlarmBitConfiguration[]
  device       DeviceExternal          @relation(fields: [deviceUniqId], references: [uniqId], onDelete: Cascade)
  logs         AlarmLog[]
}

model AlarmBitConfiguration {
  id              String             @id @default(cuid())
  alarmConfigId   String
  bitPosition     Int
  customName      String
  alertToWhatsApp Boolean            @default(false)
  alarmConfig     AlarmConfiguration @relation(fields: [alarmConfigId], references: [id], onDelete: Cascade)
}

model AlarmLog {
  id              String             @id @default(cuid())
  status          AlarmLogStatus
  triggeringValue String?
  timestamp       DateTime           @default(now())
  clearedAt       DateTime?
  alarmConfigId   String
  alarmConfig     AlarmConfiguration @relation(fields: [alarmConfigId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ZigbeeDevice {
  id           String      @id @default(cuid())
  deviceId     String      @unique @map("zigbee_device_id")
  friendlyName String?
  description  String?
  deviceType   String?
  manufacturer String?
  model        String?
  status       String      @default("unknown")
  isOnline     Boolean     @default(false)
  lastSeen     DateTime?
  capabilities Json?
  currentState Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("zigbee_devices")
}

model ZkTecoDevice {
  id              String             @id @default(cuid())
  name            String             @unique
  ipAddress       String
  port            Int
  status          ZkTecoDeviceStatus @default(DISCONNECTED)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  topicIdentifier String?            @unique
  users           ZkTecoUser[]
}

model ZkTecoUser {
  id             String       @id @default(cuid())
  uid            Int
  name           String
  password       String?
  card           String?
  fingerprints   Json?
  zkTecoDeviceId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  zkTecoDevice   ZkTecoDevice @relation(fields: [zkTecoDeviceId], references: [id], onDelete: Cascade)

  @@unique([zkTecoDeviceId, uid])
}

model Cctv {
  id         String   @id @default(cuid())
  name       String
  ipAddress  String
  port       Int
  channel    String?
  username   String?
  password   String?
  resolution String?  @default("640x480")
  framerate  Int?     @default(15)
  bitrate    Int?     @default(1024)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  group      String?
  apiKey     String?
}

model DashboardLayout {
  id        String   @id @default(cuid())
  name      String
  layout    Json
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  inUse     Boolean  @default(false)
  isActive  Boolean? @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model EnergyTarget {
  id              String   @id @default(cuid())
  loggingConfigId String   @unique
  year            Int
  monthlyTargets  Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([loggingConfigId, year])
}

model AccessController {
  id            String        @id @default(cuid())
  name          String
  ipAddress     String        @unique
  status        String        @default("offline")
  lockCount     Int           @default(0)
  firmware      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  doorStatus    String?
  lockAddresses String?
  lastSeen      DateTime?
  macAddress    String?       @unique
  freeHeap      Int?
  logFileSize   Int?
  spiffsTotal   Int?
  spiffsUsed    Int?
  totalHeap     Int?
  uptime        String?
  activityLogs  ActivityLog[]
}

model ActivityLog {
  id           String           @id @default(cuid())
  controllerId String
  timestamp    DateTime
  message      String
  details      String?
  createdAt    DateTime         @default(now())
  controller   AccessController @relation(fields: [controllerId], references: [id], onDelete: Cascade)
}

model LoraDevice {
  id       String       @id @default(cuid())
  devEui   String       @unique
  name     String
  lastSeen DateTime?
  data     DeviceData[]
}

model DeviceData {
  id        String     @id @default(cuid())
  timestamp DateTime   @default(now())
  deviceId  String
  data      Json
  device    LoraDevice @relation(fields: [deviceId], references: [id])
}

model LoraGateway {
  id          String         @id @default(cuid())
  gatewayId   String         @unique // Gateway ID dari topic MQTT
  name        String
  description String?
  lastSeen    DateTime?
  isOnline    Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  stats       GatewayStats[]
}

model GatewayStats {
  id        String   @id @default(cuid())
  gatewayId String
  timestamp DateTime

  // Upstream Statistics
  rfPacketsReceived     Int   @default(0)
  rfPacketsOk           Int   @default(0)
  rfPacketsBad          Int   @default(0)
  rfPacketsNocrc        Int   @default(0)
  rfPacketsForwarded    Int   @default(0)
  upstreamPayloadBytes  Int   @default(0)
  upstreamDatagramsSent Int   @default(0)
  upstreamNetworkBytes  Int   @default(0)
  upstreamAckRatio      Float @default(0)
  crcOkRatio            Float @default(0)
  crcFailRatio          Float @default(0)
  noCrcRatio            Float @default(0)

  // Downstream Statistics
  pullDataSent                Int   @default(0)
  pullAckReceived             Int   @default(0)
  downstreamDatagramsReceived Int   @default(0)
  downstreamNetworkBytes      Int   @default(0)
  downstreamPayloadBytes      Int   @default(0)
  txOk                        Int   @default(0)
  txErrors                    Int   @default(0)
  downstreamAckRatio          Float @default(0)

  // SX1302 Status
  counterInst String @default("0")
  counterPps  String @default("0")

  // Beacon Status
  beaconQueued   Int @default(0)
  beaconSent     Int @default(0)
  beaconRejected Int @default(0)

  createdAt DateTime    @default(now())
  gateway   LoraGateway @relation(fields: [gatewayId], references: [id])
}


model ThermalData {
  id        Int      @id @default(autoincrement())
  deviceId  String
  timestamp DateTime @default(now())
  minTemp   Float?
  maxTemp   Float?
  avgTemp   Float?
  // rawData   String?  // REMOVED - tidak perlu disimpan
  frameCount Int?     // Optional: untuk tracking frame number
  
  device    DeviceExternal @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  
  @@index([deviceId, timestamp])
}

enum AlarmType {
  CRITICAL
  MAJOR
  MINOR
}

enum AlarmKeyType {
  DIRECT
  THRESHOLD
  BIT_VALUE
}

enum ZkTecoDeviceStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
}

enum MaintenanceTarget {
  Device
  Rack
}

enum AlarmLogStatus {
  ACTIVE
  ACKNOWLEDGED
  CLEARED
}

model Tenant {
  id          String    @id @default(cuid())
  name        String    @unique
  company     String?
  email       String    @unique
  phone       String?
  address     String?
  status      String    @default("active") // active, inactive, suspended
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  notes       String?

  // Relations - when implementing multi-tenancy
  // users       User[]    // Uncomment when adding tenant isolation
  locations   NodeTenantLocation[]

  @@map("Tenant")
}

model NodeTenantLocation {
  id          String    @id @default(cuid())
  name        String    @unique
  longitude   Float
  latitude    Float
  url         String?
  topic       String?
  description String?
  status      Boolean   @default(false) // Auto update to true when MQTT payload received
  nodeType    String    @default("node") // "server" or "node"
  tenantId    String?   // Optional foreign key for locations assigned to tenants
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true) // General active/inactive for soft deletes

  // MQTT payload tracking
  mqttPayloads NodeLocationMqttPayload[]

  // Relations
  tenant      Tenant?   @relation(fields: [tenantId], references: [id])

  @@map("NodeTenantLocation")
}

model NodeLocationMqttPayload {
  id           String            @id @default(cuid())
  locationId   String
  topic        String            // MQTT topic
  payload      Json              // MQTT payload data
  receivedAt   DateTime          @default(now()) // When MQTT message received
  messageId    String?           // MQTT message ID if available

  // Relations
  location     NodeTenantLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId, receivedAt])
  @@index([topic])
  @@map("NodeLocationMqttPayload")
}

model Rack {
  id         String         @id @default(cuid())
  name       String         @unique
  capacityU  Int            @default(42)
  location   String?
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  devices    DeviceExternal[]
}

model Layout2D {
  id             String                  @id @default(cuid())
  name           String                  @unique
  isUse          Boolean                 @default(false)
  image          String?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  dataPoints     Layout2DDataPoint[]
  flowIndicators Layout2DFlowIndicator[]
}

model Layout2DDataPoint {
  id            String   @id @default(cuid())
  layoutId      String
  deviceUniqId  String
  // Legacy single-key format (for backward compatibility)
  selectedKey   String?
  // New multi-key format
  selectedKeys  String? // JSON string containing array of KeyConfig
  units         String?
  multiply      Float?   @default(1)
  customName    String
  positionX     Float
  positionY     Float
  fontSize      Int?     @default(14)
  color         String?  @default("#000000")
  iconName      String?
  iconColor     String?  @default("#666666")
  showIcon      Boolean? @default(false)
  displayLayout String?  @default("vertical") // "vertical", "horizontal", "grid"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  layout Layout2D       @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  device DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId])

  // Update unique constraint to allow multiple keys per device
  @@unique([layoutId, deviceUniqId, customName])
}

model Layout2DFlowIndicator {
  id             String @id @default(cuid())
  layoutId       String
  deviceUniqId   String
  selectedKey    String
  customName     String
  positionX      Float
  positionY      Float
  arrowDirection String @default("right") // "right", "left", "up", "down"

  // Logic conditions
  logicOperator String // ">", "<", ">=", "<=", "==", "!="
  compareValue  String // Value to compare (supports number, string, boolean)
  valueType     String @default("number") // "number", "string", "boolean"

  // Visual states based on condition result
  // When condition is TRUE
  trueColor     String  @default("#22c55e") // green
  trueAnimation Boolean @default(true)

  // When condition is FALSE
  falseColor     String  @default("#ef4444") // red
  falseAnimation Boolean @default(false)

  // Warning state (optional for range conditions)
  warningColor     String  @default("#f59e0b") // orange
  warningAnimation Boolean @default(true)
  warningEnabled   Boolean @default(false)
  warningOperator  String? // Secondary condition for warning
  warningValue     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  layout Layout2D       @relation(fields: [layoutId], references: [id], onDelete: Cascade)
  device DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId])

  @@unique([layoutId, deviceUniqId, selectedKey, positionX, positionY])
}
