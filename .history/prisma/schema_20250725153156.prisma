// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  role           Role     @default(USER)
  fingerprintId  String?  @unique
  cardUid        String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

// Enum untuk tipe-tipe alarm
enum AlarmType {
  CRITICAL
  MAJOR
  MINOR
}

// Enum untuk tipe-tipe key alarm
enum AlarmKeyType {
  DIRECT     // Untuk nilai boolean atau 0/1
  THRESHOLD  // Untuk ambang batas min/max
  BIT_VALUE  // Untuk memantau bit individual dari sebuah integer
}



model DeviceExternal {
  id                         String                  @id @default(cuid())
  uniqId                     String                  @unique @default(cuid())
  name                       String
  topic                      String                  @unique
  address                    String?
   // --- START NEW FIELDS ---
  lastPayload           Json? @db.JsonB // Menyimpan seluruh payload JSON terakhir dari MQTT
  lastUpdatedByMqtt     DateTime? // Kapan terakhir diupdate oleh MQTT
  // --- END NEW FIELDS ---
  createdAt                  DateTime                @default(now())
  updatedAt                  DateTime                @updatedAt
  loggingConfigs             LoggingConfiguration[]
   // --- TAMBAHKAN RELASI BALIK UNTUK ALARM ---
  alarmConfigs            AlarmConfiguration[]
  sourceForBillConfigs       BillConfiguration[]     @relation("SourceDeviceForBill")
  publishTargetForBillConfig BillConfiguration?      @relation("PublishTargetForBill")

  // Relasi balik untuk PueApiTopic
  pueApiTopicConfig          PueConfiguration?       @relation("PueApiTopic") // <-- PERBAIKAN: Tambahkan nama relasi

  // --- NEW: Relasi balik untuk PowerAnalyzerApiTopic ---
  powerAnalyzerApiTopicConfig PowerAnalyzerConfiguration? @relation("PowerAnalyzerApiTopic") // <--- TAMBAHKAN BARIS INI

}

model LoggingConfiguration {
  id           String         @id @default(cuid())
  customName   String
  key          String
  units        String?
  multiply     Float?         @default(1)
  deviceUniqId String
  device       DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  @@unique([deviceUniqId, key])
}

model LoggedData {
  id        String   @id @default(cuid())
  configId  String
  value     Float
  timestamp DateTime @default(now())
}

model BillConfiguration {
  id                        String         @id @default(cuid())
  customName                String         @unique

  sourceDeviceUniqId        String
  sourceDevice              DeviceExternal @relation("SourceDeviceForBill", fields: [sourceDeviceUniqId], references: [uniqId])
  sourceDeviceKey           String

  publishTargetDeviceUniqId String @unique // <-- PERBAIKAN: Tambahkan @unique
  publishTargetDevice       DeviceExternal @relation("PublishTargetForBill", fields: [publishTargetDeviceUniqId], references: [uniqId])

  rupiahRatePerKwh          Float          @default(1467)
  dollarRatePerKwh          Float          @default(0.1)

  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  logs                      BillLog[]
}

model BillLog {
  id             String            @id @default(cuid())
  configId       String
  config         BillConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)

  rawValue       Float
  rupiahCost     Float
  dollarCost     Float

  timestamp      DateTime          @default(now())
}

model PueConfiguration {
  id                   String   @id @default(cuid())
  customName           String   @unique
  type                 String   @default("pue")

  apiTopicUniqId       String?  @unique
  apiTopic             DeviceExternal? @relation("PueApiTopic", fields: [apiTopicUniqId], references: [uniqId])

  pduList              Json? @db.JsonB
  mainPower            Json? @db.JsonB

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}


model PowerAnalyzerConfiguration {
  id         String   @id @default(cuid())
  customName String   @unique

  // Relasi ke DeviceExternal yang akan menjadi 'topic' untuk API hasil kalkulasi
  // Ini setara dengan 'apiTopicId' di kode Vue Anda.
  apiTopicUniqId String?  @unique
  apiTopic       DeviceExternal? @relation("PowerAnalyzerApiTopic", fields: [apiTopicUniqId], references: [uniqId])

  // Menyimpan daftar PDU (IT Power). 
  // Contoh: [{ uniqId: "dev_xyz", keys: ["power_a", "power_b"] }]
  pduList    Json?    @db.JsonB

  // Menyimpan sumber Main Power.
  // Contoh: { uniqId: "dev_abc", key: "total_power" }
  mainPower  Json?    @db.JsonB

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model MenuConfiguration {
  id        String   @id @default(cuid())
  
  // Kolom ini akan menyimpan seluruh objek pengaturan menu sebagai JSON.
  // Contoh: { "Monitoring": { "enabled": true, "submenus": {...} }, ... }
  structure Json     @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model AlarmConfiguration {
  id           String         @id @default(cuid())
  customName   String         // Nama alarm yang mudah dikenali, misal "Suhu Ruangan Terlalu Panas"
  alarmType    AlarmType      // CRITICAL, MAJOR, atau MINOR
  keyType      AlarmKeyType   // DIRECT, THRESHOLD, atau BIT_VALUE
  key          String         // Key dari payload JSON MQTT yang dipantau, misal "temperature" atau "status_flags"
  
  // Relasi ke device external
  deviceUniqId String
  device       DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId], onDelete: Cascade)

  // Field khusus untuk tipe THRESHOLD
  minValue     Float?         // Ambang batas bawah
  maxValue     Float?         // Ambang batas atas
  maxOnly      Boolean?       @default(false) // Jika true, hanya memantau ambang batas atas

  // Relasi ke konfigurasi bit (untuk tipe BIT_VALUE)
  bits         AlarmBitConfiguration[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model AlarmBitConfiguration {
  id                String             @id @default(cuid())
  alarmConfigId     String             // Foreign key ke AlarmConfiguration
  alarmConfig       AlarmConfiguration @relation(fields: [alarmConfigId], references: [id], onDelete: Cascade)
  
  bitPosition       Int                // Posisi bit yang dipantau (misal: 0, 1, 2, ...)
  customName        String             // Nama spesifik untuk alarm bit ini, misal "Pintu Terbuka"
  alertToWhatsApp   Boolean            @default(false) // Flag untuk notifikasi
}


// --- TAMBAHKAN MODEL-MODEL BARU DI BAWAH INI ---

enum AlarmLogStatus {
  ACTIVE       // Alarm baru saja terpicu dan sedang aktif
  ACKNOWLEDGED // (Opsional) Alarm sudah dilihat oleh user
  CLEARED      // Alarm sudah kembali ke kondisi normal
}

model AlarmLog {
  id              String             @id @default(cuid())
  status          AlarmLogStatus     // Status saat ini: ACTIVE, ACKNOWLEDGED, atau CLEARED
  triggeringValue String?            // Nilai yang memicu alarm (disimpan sebagai String agar fleksibel)
  timestamp       DateTime           @default(now())
  clearedAt       DateTime?          // Waktu kapan alarm kembali normal

  // Relasi ke konfigurasi alarm
  alarmConfigId   String
  alarmConfig     AlarmConfiguration @relation(fields: [alarmConfigId], references: [id], onDelete: Cascade)
}

// --- SELESAI TAMBAHAN ---