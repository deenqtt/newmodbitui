// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// File: prisma/schema.prisma

// ... (existing models like User, Role, LoggingConfiguration, BillConfiguration, BillLog)

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  role           Role     @default(USER)
  fingerprintId  String?  @unique
  cardUid        String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model DeviceExternal {
  id                      String                  @id @default(cuid())
  uniqId                  String                  @unique @default(cuid()) // Ini yang akan direferensikan
  name                    String
  topic                   String                  @unique
  address                 String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  loggingConfigs          LoggingConfiguration[]

  // Relasi untuk BillConfiguration (tetap pakai uniqId)
  sourceForBillConfigs    BillConfiguration[]     @relation("SourceDeviceForBill")
  publishTargetForBillConfig BillConfiguration?   @relation("PublishTargetForBill")

  // Relasi baru untuk PueConfiguration, mereferensikan uniqId
  pueApiTopic             PueConfiguration?       @relation("PueApiTopic", fields: [apiTopicUniqId], references: [uniqId]) // <-- PERBAIKAN DI SINI
  apiTopicUniqId          String? @unique // <-- Tambahkan ini untuk relasi one-to-one
}

model LoggingConfiguration {
  id           String         @id @default(cuid())
  customName   String
  key          String
  units        String?
  multiply     Float?         @default(1)
  deviceUniqId String
  device       DeviceExternal @relation(fields: [deviceUniqId], references: [uniqId])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  @@unique([deviceUniqId, key])
}

model LoggedData {
  id        String   @id @default(cuid())
  configId  String
  value     Float
  timestamp DateTime @default(now())
}

model BillConfiguration {
  id                        String         @id @default(cuid())
  customName                String         @unique

  // Menggunakan uniqId untuk relasi ke perangkat sumber (sesuai contoh Anda)
  sourceDeviceUniqId        String
  sourceDevice              DeviceExternal @relation("SourceDeviceForBill", fields: [sourceDeviceUniqId], references: [uniqId])
  sourceDeviceKey           String

  // Menggunakan uniqId untuk relasi ke perangkat "virtual"
  publishTargetDeviceUniqId String
  publishTargetDevice       DeviceExternal @relation("PublishTargetForBill", fields: [publishTargetDeviceUniqId], references: [uniqId])

  rupiahRatePerKwh          Float          @default(1467)
  dollarRatePerKwh          Float          @default(0.1)

  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  logs                      BillLog[]
}

model BillLog {
  id             String            @id @default(cuid())
  configId       String
  config         BillConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)

  rawValue       Float
  rupiahCost     Float
  dollarCost     Float

  timestamp      DateTime          @default(now())
}

// --- MODEL BARU UNTUK PUE (Power Usage Effectiveness) ---
model PueConfiguration {
  id                   String   @id @default(cuid())
  customName           String   @unique // Contoh: "Data Center A PUE"
  type                 String   @default("pue") // Menandai ini sebagai konfigurasi PUE

  // apiTopicUniqId akan merujuk ke uniqId DeviceExternal yang dibuat secara otomatis
  apiTopicUniqId       String? @unique // <-- PERBAIKAN DI SINI, ganti apiTopicId ke apiTopicUniqId
  apiTopic             DeviceExternal? @relation("PueApiTopic", fields: [apiTopicUniqId], references: [uniqId]) // <-- relasi tetap ke uniqId

  // Menyimpan konfigurasi PDU (racks) sebagai JSONB untuk fleksibilitas
  // Struktur: [{ topicUniqId: String, name: String, keys: String[], value: Float }] <-- field topicId di dalam JSON juga jadi topicUniqId
  pduList              Json? @db.JsonB

  // Menyimpan konfigurasi Main Power sebagai JSONB
  // Struktur: { topicUniqId: String, key: String, value: Float } <-- field topicId di dalam JSON juga jadi topicUniqId
  mainPower            Json? @db.JsonB

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}